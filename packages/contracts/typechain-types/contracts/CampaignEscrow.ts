/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CampaignEscrow {
  export type ClaimStruct = {
    index: BigNumberish;
    account: AddressLike;
    amount: BigNumberish;
    proof: BytesLike[];
  };

  export type ClaimStructOutput = [
    index: bigint,
    account: string,
    amount: bigint,
    proof: string[]
  ] & { index: bigint; account: string; amount: bigint; proof: string[] };

  export type CampaignStruct = {
    advertiser: AddressLike;
    fundedAmount: BigNumberish;
    remainingAmount: BigNumberish;
    createdAt: BigNumberish;
    active: boolean;
  };

  export type CampaignStructOutput = [
    advertiser: string,
    fundedAmount: bigint,
    remainingAmount: bigint,
    createdAt: bigint,
    active: boolean
  ] & {
    advertiser: string;
    fundedAmount: bigint;
    remainingAmount: bigint;
    createdAt: bigint;
    active: boolean;
  };

  export type EpochStruct = {
    merkleRoot: BytesLike;
    allocatedAmount: BigNumberish;
    claimedAmount: BigNumberish;
    finalizedAt: BigNumberish;
    finalized: boolean;
  };

  export type EpochStructOutput = [
    merkleRoot: string,
    allocatedAmount: bigint,
    claimedAmount: bigint,
    finalizedAt: bigint,
    finalized: boolean
  ] & {
    merkleRoot: string;
    allocatedAmount: bigint;
    claimedAmount: bigint;
    finalizedAt: bigint;
    finalized: boolean;
  };
}

export interface CampaignEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EPOCH_DURATION"
      | "bulkClaim"
      | "campaigns"
      | "claim"
      | "claimed"
      | "createAndFundCampaign"
      | "epochs"
      | "feeCollector"
      | "finalizeEpoch"
      | "fundCampaign"
      | "getCampaign"
      | "getCurrentEpoch"
      | "getEpoch"
      | "getEpochStartTime"
      | "isClaimed"
      | "maxBatchSize"
      | "nextCampaignId"
      | "owner"
      | "pause"
      | "paused"
      | "paymentToken"
      | "platformFeeRate"
      | "renounceOwnership"
      | "setFeeCollector"
      | "setMaxBatchSize"
      | "setPlatformFeeRate"
      | "transferOwnership"
      | "unpause"
      | "withdrawSurplus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BulkClaimed"
      | "CampaignCreated"
      | "CampaignFunded"
      | "Claimed"
      | "EpochFinalized"
      | "FeeCollectorUpdated"
      | "MaxBatchSizeUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PlatformFeeUpdated"
      | "SurplusWithdrawn"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkClaim",
    values: [BigNumberish, BigNumberish, CampaignEscrow.ClaimStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndFundCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEpoch",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawSurplus",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAndFundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSurplus",
    data: BytesLike
  ): Result;
}

export namespace BulkClaimedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    epoch: BigNumberish,
    numClaims: BigNumberish,
    totalPaid: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    epoch: bigint,
    numClaims: bigint,
    totalPaid: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    epoch: bigint;
    numClaims: bigint;
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    advertiser: AddressLike,
    fundedAmount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    advertiser: string,
    fundedAmount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    advertiser: string;
    fundedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFundedEvent {
  export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [campaignId: bigint, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    epoch: BigNumberish,
    index: BigNumberish,
    account: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    epoch: bigint,
    index: bigint,
    account: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    epoch: bigint;
    index: bigint;
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochFinalizedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    epoch: BigNumberish,
    merkleRoot: BytesLike,
    allocatedAmount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    epoch: bigint,
    merkleRoot: string,
    allocatedAmount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    epoch: bigint;
    merkleRoot: string;
    allocatedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectorUpdatedEvent {
  export type InputTuple = [newCollector: AddressLike];
  export type OutputTuple = [newCollector: string];
  export interface OutputObject {
    newCollector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxBatchSizeUpdatedEvent {
  export type InputTuple = [newSize: BigNumberish];
  export type OutputTuple = [newSize: bigint];
  export interface OutputObject {
    newSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SurplusWithdrawnEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [campaignId: bigint, amount: bigint, to: string];
  export interface OutputObject {
    campaignId: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): CampaignEscrow;
  waitForDeployment(): Promise<this>;

  interface: CampaignEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  bulkClaim: TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      claims: CampaignEscrow.ClaimStruct[]
    ],
    [void],
    "nonpayable"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        advertiser: string;
        fundedAmount: bigint;
        remainingAmount: bigint;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  claim: TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  createAndFundCampaign: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  epochs: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        merkleRoot: string;
        allocatedAmount: bigint;
        claimedAmount: bigint;
        finalizedAt: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  finalizeEpoch: TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      allocatedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fundCampaign: TypedContractMethod<
    [campaignId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [CampaignEscrow.CampaignStructOutput],
    "view"
  >;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  getEpoch: TypedContractMethod<
    [campaignId: BigNumberish, epoch: BigNumberish],
    [CampaignEscrow.EpochStructOutput],
    "view"
  >;

  getEpochStartTime: TypedContractMethod<
    [epoch: BigNumberish],
    [bigint],
    "view"
  >;

  isClaimed: TypedContractMethod<
    [campaignId: BigNumberish, epoch: BigNumberish, index: BigNumberish],
    [boolean],
    "view"
  >;

  maxBatchSize: TypedContractMethod<[], [bigint], "view">;

  nextCampaignId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  platformFeeRate: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeCollector: TypedContractMethod<
    [_collector: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxBatchSize: TypedContractMethod<
    [_size: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFeeRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawSurplus: TypedContractMethod<
    [campaignId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bulkClaim"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      claims: CampaignEscrow.ClaimStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        advertiser: string;
        fundedAmount: bigint;
        remainingAmount: bigint;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      index: BigNumberish,
      account: AddressLike,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAndFundCampaign"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        merkleRoot: string;
        allocatedAmount: bigint;
        claimedAmount: bigint;
        finalizedAt: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeEpoch"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      allocatedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundCampaign"
  ): TypedContractMethod<
    [campaignId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [campaignId: BigNumberish],
    [CampaignEscrow.CampaignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpoch"
  ): TypedContractMethod<
    [campaignId: BigNumberish, epoch: BigNumberish],
    [CampaignEscrow.EpochStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochStartTime"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isClaimed"
  ): TypedContractMethod<
    [campaignId: BigNumberish, epoch: BigNumberish, index: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxBatchSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextCampaignId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[_collector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxBatchSize"
  ): TypedContractMethod<[_size: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeeRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawSurplus"
  ): TypedContractMethod<
    [campaignId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BulkClaimed"
  ): TypedContractEvent<
    BulkClaimedEvent.InputTuple,
    BulkClaimedEvent.OutputTuple,
    BulkClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFunded"
  ): TypedContractEvent<
    CampaignFundedEvent.InputTuple,
    CampaignFundedEvent.OutputTuple,
    CampaignFundedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "EpochFinalized"
  ): TypedContractEvent<
    EpochFinalizedEvent.InputTuple,
    EpochFinalizedEvent.OutputTuple,
    EpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollectorUpdated"
  ): TypedContractEvent<
    FeeCollectorUpdatedEvent.InputTuple,
    FeeCollectorUpdatedEvent.OutputTuple,
    FeeCollectorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxBatchSizeUpdated"
  ): TypedContractEvent<
    MaxBatchSizeUpdatedEvent.InputTuple,
    MaxBatchSizeUpdatedEvent.OutputTuple,
    MaxBatchSizeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SurplusWithdrawn"
  ): TypedContractEvent<
    SurplusWithdrawnEvent.InputTuple,
    SurplusWithdrawnEvent.OutputTuple,
    SurplusWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BulkClaimed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      BulkClaimedEvent.InputTuple,
      BulkClaimedEvent.OutputTuple,
      BulkClaimedEvent.OutputObject
    >;
    BulkClaimed: TypedContractEvent<
      BulkClaimedEvent.InputTuple,
      BulkClaimedEvent.OutputTuple,
      BulkClaimedEvent.OutputObject
    >;

    "CampaignCreated(uint256,address,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFunded(uint256,uint256)": TypedContractEvent<
      CampaignFundedEvent.InputTuple,
      CampaignFundedEvent.OutputTuple,
      CampaignFundedEvent.OutputObject
    >;
    CampaignFunded: TypedContractEvent<
      CampaignFundedEvent.InputTuple,
      CampaignFundedEvent.OutputTuple,
      CampaignFundedEvent.OutputObject
    >;

    "Claimed(uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "EpochFinalized(uint256,uint256,bytes32,uint256)": TypedContractEvent<
      EpochFinalizedEvent.InputTuple,
      EpochFinalizedEvent.OutputTuple,
      EpochFinalizedEvent.OutputObject
    >;
    EpochFinalized: TypedContractEvent<
      EpochFinalizedEvent.InputTuple,
      EpochFinalizedEvent.OutputTuple,
      EpochFinalizedEvent.OutputObject
    >;

    "FeeCollectorUpdated(address)": TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;
    FeeCollectorUpdated: TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;

    "MaxBatchSizeUpdated(uint256)": TypedContractEvent<
      MaxBatchSizeUpdatedEvent.InputTuple,
      MaxBatchSizeUpdatedEvent.OutputTuple,
      MaxBatchSizeUpdatedEvent.OutputObject
    >;
    MaxBatchSizeUpdated: TypedContractEvent<
      MaxBatchSizeUpdatedEvent.InputTuple,
      MaxBatchSizeUpdatedEvent.OutputTuple,
      MaxBatchSizeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "SurplusWithdrawn(uint256,uint256,address)": TypedContractEvent<
      SurplusWithdrawnEvent.InputTuple,
      SurplusWithdrawnEvent.OutputTuple,
      SurplusWithdrawnEvent.OutputObject
    >;
    SurplusWithdrawn: TypedContractEvent<
      SurplusWithdrawnEvent.InputTuple,
      SurplusWithdrawnEvent.OutputTuple,
      SurplusWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
