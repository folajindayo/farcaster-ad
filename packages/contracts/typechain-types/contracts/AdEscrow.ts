/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AdEscrow {
  export type CampaignStruct = {
    advertiser: AddressLike;
    budget: BigNumberish;
    spent: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    isCompleted: boolean;
  };

  export type CampaignStructOutput = [
    advertiser: string,
    budget: bigint,
    spent: bigint,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    isCompleted: boolean
  ] & {
    advertiser: string;
    budget: bigint;
    spent: bigint;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    isCompleted: boolean;
  };
}

export interface AdEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateCampaign"
      | "advertiserBalances"
      | "calculatePlatformFee"
      | "campaigns"
      | "completeCampaign"
      | "createCampaign"
      | "fundCampaign"
      | "getCampaign"
      | "isCampaignExpired"
      | "nextCampaignId"
      | "owner"
      | "pauseCampaign"
      | "platformFeePercentage"
      | "platformWallet"
      | "recordSpend"
      | "renounceOwnership"
      | "resumeCampaign"
      | "setPlatformFeePercentage"
      | "setPlatformWallet"
      | "transferOwnership"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCompleted"
      | "CampaignCreated"
      | "CampaignFunded"
      | "CampaignSpent"
      | "OwnershipTransferred"
      | "PlatformFeeCollected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advertiserBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordSpend",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advertiserBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace CampaignCompletedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    refundAmount: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, refundAmount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    advertiser: AddressLike,
    budget: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    advertiser: string,
    budget: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    advertiser: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFundedEvent {
  export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [campaignId: bigint, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignSpentEvent {
  export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [campaignId: bigint, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeCollectedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): AdEscrow;
  waitForDeployment(): Promise<this>;

  interface: AdEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  advertiserBalances: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  calculatePlatformFee: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean] & {
        advertiser: string;
        budget: bigint;
        spent: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  completeCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [_budget: BigNumberish, _duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  fundCampaign: TypedContractMethod<
    [_campaignId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [AdEscrow.CampaignStructOutput],
    "view"
  >;

  isCampaignExpired: TypedContractMethod<
    [_campaignId: BigNumberish],
    [boolean],
    "view"
  >;

  nextCampaignId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauseCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  recordSpend: TypedContractMethod<
    [_campaignId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resumeCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformWallet: TypedContractMethod<
    [_platformWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "advertiserBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePlatformFee"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean] & {
        advertiser: string;
        budget: bigint;
        spent: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [_budget: BigNumberish, _duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundCampaign"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [AdEscrow.CampaignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCampaignExpired"
  ): TypedContractMethod<[_campaignId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextCampaignId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordSpend"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformWallet"
  ): TypedContractMethod<[_platformWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CampaignCompleted"
  ): TypedContractEvent<
    CampaignCompletedEvent.InputTuple,
    CampaignCompletedEvent.OutputTuple,
    CampaignCompletedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFunded"
  ): TypedContractEvent<
    CampaignFundedEvent.InputTuple,
    CampaignFundedEvent.OutputTuple,
    CampaignFundedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignSpent"
  ): TypedContractEvent<
    CampaignSpentEvent.InputTuple,
    CampaignSpentEvent.OutputTuple,
    CampaignSpentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeCollected"
  ): TypedContractEvent<
    PlatformFeeCollectedEvent.InputTuple,
    PlatformFeeCollectedEvent.OutputTuple,
    PlatformFeeCollectedEvent.OutputObject
  >;

  filters: {
    "CampaignCompleted(uint256,uint256)": TypedContractEvent<
      CampaignCompletedEvent.InputTuple,
      CampaignCompletedEvent.OutputTuple,
      CampaignCompletedEvent.OutputObject
    >;
    CampaignCompleted: TypedContractEvent<
      CampaignCompletedEvent.InputTuple,
      CampaignCompletedEvent.OutputTuple,
      CampaignCompletedEvent.OutputObject
    >;

    "CampaignCreated(uint256,address,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFunded(uint256,uint256)": TypedContractEvent<
      CampaignFundedEvent.InputTuple,
      CampaignFundedEvent.OutputTuple,
      CampaignFundedEvent.OutputObject
    >;
    CampaignFunded: TypedContractEvent<
      CampaignFundedEvent.InputTuple,
      CampaignFundedEvent.OutputTuple,
      CampaignFundedEvent.OutputObject
    >;

    "CampaignSpent(uint256,uint256)": TypedContractEvent<
      CampaignSpentEvent.InputTuple,
      CampaignSpentEvent.OutputTuple,
      CampaignSpentEvent.OutputObject
    >;
    CampaignSpent: TypedContractEvent<
      CampaignSpentEvent.InputTuple,
      CampaignSpentEvent.OutputTuple,
      CampaignSpentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeCollected(uint256)": TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;
    PlatformFeeCollected: TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;
  };
}
