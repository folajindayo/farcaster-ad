/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MerkleDistributor {
  export type PayoutCycleStruct = {
    merkleRoot: BytesLike;
    totalAmount: BigNumberish;
    hostCount: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type PayoutCycleStructOutput = [
    merkleRoot: string,
    totalAmount: bigint,
    hostCount: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    merkleRoot: string;
    totalAmount: bigint;
    hostCount: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface MerkleDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchClaimEarnings"
      | "calculateHostEarnings"
      | "calculatePlatformFee"
      | "claimEarnings"
      | "claimed"
      | "createPayoutCycle"
      | "deactivatePayoutCycle"
      | "getPayoutCycle"
      | "hasClaimed"
      | "nextPayoutCycleId"
      | "owner"
      | "payoutCycles"
      | "platformFeePercentage"
      | "platformWallet"
      | "renounceOwnership"
      | "setPlatformFeePercentage"
      | "setPlatformWallet"
      | "transferOwnership"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EarningsClaimed"
      | "OwnershipTransferred"
      | "PayoutCycleCreated"
      | "PlatformFeeCollected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchClaimEarnings",
    values: [BigNumberish[], BigNumberish[], BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHostEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarnings",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPayoutCycle",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePayoutCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPayoutCycleId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutCycles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchClaimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHostEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPayoutCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePayoutCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPayoutCycleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace EarningsClaimedEvent {
  export type InputTuple = [
    cycleId: BigNumberish,
    host: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [cycleId: bigint, host: string, amount: bigint];
  export interface OutputObject {
    cycleId: bigint;
    host: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutCycleCreatedEvent {
  export type InputTuple = [
    cycleId: BigNumberish,
    merkleRoot: BytesLike,
    totalAmount: BigNumberish,
    hostCount: BigNumberish
  ];
  export type OutputTuple = [
    cycleId: bigint,
    merkleRoot: string,
    totalAmount: bigint,
    hostCount: bigint
  ];
  export interface OutputObject {
    cycleId: bigint;
    merkleRoot: string;
    totalAmount: bigint;
    hostCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeCollectedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleDistributor;
  waitForDeployment(): Promise<this>;

  interface: MerkleDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchClaimEarnings: TypedContractMethod<
    [
      _cycleIds: BigNumberish[],
      _amounts: BigNumberish[],
      _proofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;

  calculateHostEarnings: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  calculatePlatformFee: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  claimEarnings: TypedContractMethod<
    [_cycleId: BigNumberish, _amount: BigNumberish, _proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  createPayoutCycle: TypedContractMethod<
    [
      _merkleRoot: BytesLike,
      _totalAmount: BigNumberish,
      _hostCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deactivatePayoutCycle: TypedContractMethod<
    [_cycleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPayoutCycle: TypedContractMethod<
    [_cycleId: BigNumberish],
    [MerkleDistributor.PayoutCycleStructOutput],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [_cycleId: BigNumberish, _host: AddressLike],
    [boolean],
    "view"
  >;

  nextPayoutCycleId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payoutCycles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        merkleRoot: string;
        totalAmount: bigint;
        hostCount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPlatformFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformWallet: TypedContractMethod<
    [_platformWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchClaimEarnings"
  ): TypedContractMethod<
    [
      _cycleIds: BigNumberish[],
      _amounts: BigNumberish[],
      _proofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateHostEarnings"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePlatformFee"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimEarnings"
  ): TypedContractMethod<
    [_cycleId: BigNumberish, _amount: BigNumberish, _proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPayoutCycle"
  ): TypedContractMethod<
    [
      _merkleRoot: BytesLike,
      _totalAmount: BigNumberish,
      _hostCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivatePayoutCycle"
  ): TypedContractMethod<[_cycleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPayoutCycle"
  ): TypedContractMethod<
    [_cycleId: BigNumberish],
    [MerkleDistributor.PayoutCycleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [_cycleId: BigNumberish, _host: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextPayoutCycleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payoutCycles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        merkleRoot: string;
        totalAmount: bigint;
        hostCount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformWallet"
  ): TypedContractMethod<[_platformWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EarningsClaimed"
  ): TypedContractEvent<
    EarningsClaimedEvent.InputTuple,
    EarningsClaimedEvent.OutputTuple,
    EarningsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PayoutCycleCreated"
  ): TypedContractEvent<
    PayoutCycleCreatedEvent.InputTuple,
    PayoutCycleCreatedEvent.OutputTuple,
    PayoutCycleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeCollected"
  ): TypedContractEvent<
    PlatformFeeCollectedEvent.InputTuple,
    PlatformFeeCollectedEvent.OutputTuple,
    PlatformFeeCollectedEvent.OutputObject
  >;

  filters: {
    "EarningsClaimed(uint256,address,uint256)": TypedContractEvent<
      EarningsClaimedEvent.InputTuple,
      EarningsClaimedEvent.OutputTuple,
      EarningsClaimedEvent.OutputObject
    >;
    EarningsClaimed: TypedContractEvent<
      EarningsClaimedEvent.InputTuple,
      EarningsClaimedEvent.OutputTuple,
      EarningsClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PayoutCycleCreated(uint256,bytes32,uint256,uint256)": TypedContractEvent<
      PayoutCycleCreatedEvent.InputTuple,
      PayoutCycleCreatedEvent.OutputTuple,
      PayoutCycleCreatedEvent.OutputObject
    >;
    PayoutCycleCreated: TypedContractEvent<
      PayoutCycleCreatedEvent.InputTuple,
      PayoutCycleCreatedEvent.OutputTuple,
      PayoutCycleCreatedEvent.OutputObject
    >;

    "PlatformFeeCollected(uint256)": TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;
    PlatformFeeCollected: TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;
  };
}
